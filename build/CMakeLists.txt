PROJECT(FreeImage)

CMAKE_MINIMUM_REQUIRED(VERSION 2.8.10)

IF(MSVC)
# More MSVC specific compilation flags
	ADD_DEFINITIONS(-D_SCL_SECURE_NO_WARNINGS -D_CRT_SECURE_NO_DEPRECATE)
	SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} /wd4996 /wd4819 /wd4244")
	SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /wd4996 /wd4819 /wd4244")
ENDIF()

# Determine Platform
IF(MSVC AND CMAKE_CL_64)
	SET(X64 1)
ELSEIF(CMAKE_SIZEOF_VOID_P MATCHES 8)
	SET(X64 1)
ENDIF()
IF(NOT MSVC AND X64)
	SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -fPIC")
	SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fPIC")
ENDIF()

# Set postfix
SET(CMAKE_DEBUG_POSTFIX "_d" CACHE STRING "add a postfix, usually d on windows")
SET(CMAKE_RELWITHDEBINFO_POSTFIX "_rd" CACHE STRING "add a postfix, usually empty on windows")
SET(CMAKE_MINSIZEREL_POSTFIX "_s" CACHE STRING "add a postfix, usually empty on windows")

# Output directories
SET(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${OUTPUT_LIBDIR})
SET(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${OUTPUT_BINDIR})
IF(WIN32)
	SET(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${OUTPUT_BINDIR})
ELSE()
	SET(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${OUTPUT_LIBDIR})
ENDIF()

# Install directories
SET(INSTALL_INCDIR include)
SET(INSTALL_BINDIR bin)
SET(INSTALL_ARCHIVEDIR lib)
IF(WIN32)
	SET(INSTALL_LIBDIR bin)
ELSE()
	SET(INSTALL_LIBDIR lib)
ENDIF()

# Project directories
FIND_PATH(PROJECT_DIR FreeImage.h PATHS ../src/)
SET(3RDPARTY_DIR ${PROJECT_DIR}/../3rdparty)
SET(PLUGIN_DIR ${PROJECT_DIR}/../plugin)

# FreeImage core
FILE(GLOB SOURCE_FILES ${PROJECT_DIR}/FreeImage/*.cpp ${PROJECT_DIR}/FreeImageToolkit/*.cpp)

SOURCE_GROUP("Source Files" FILES ${SOURCE_FILES})

ADD_DEFINITIONS(-DFREEIMAGE_EXPORTS -DOPJ_STATIC)
ADD_LIBRARY(freeimage SHARED ${SOURCE_FILES})

IF(NOT MSVC)
	ADD_DEFINITIONS(-D__ANSI__)
ENDIF()

IF(MSVC)
	OPTION(SUSIE_PLUGIN "Build Susie plugin" OFF)
	SET_TARGET_PROPERTIES(freeimage PROPERTIES OUTPUT_NAME "FreeImage")
ENDIF()
OPTION(QT_PLUGIN "Build QT plugin" OFF)
OPTION(CONV_TEST "Build a simple convert test program" OFF)
ADD_SUBDIRECTORY(plugin)

ADD_SUBDIRECTORY(libjpeg-turbo)
ADD_SUBDIRECTORY(libjxr)
ADD_SUBDIRECTORY(libpng)
ADD_SUBDIRECTORY(libtiff)
ADD_SUBDIRECTORY(libwebp)
ADD_SUBDIRECTORY(zlib)

ADD_DEPENDENCIES(freeimage libjpeg-turbo libjxr libpng libtiff libwebp zlib)
TARGET_LINK_LIBRARIES(freeimage libjpeg-turbo libjxr libpng libtiff libwebp zlib)
INCLUDE_DIRECTORIES(
	${PROJECT_DIR}/
	${3RDPARTY_DIR}/libjpeg-turbo/
	${3RDPARTY_DIR}/libpng/
	${3RDPARTY_DIR}/libjxr/common/include/
	${3RDPARTY_DIR}/libjxr/image/sys/
	${3RDPARTY_DIR}/libjxr/image/x86/
	${3RDPARTY_DIR}/libjxr/jxrgluelib/
	${3RDPARTY_DIR}/libtiff/
	${3RDPARTY_DIR}/libwebp/src/
	${3RDPARTY_DIR}/zlib/
	${CMAKE_BINARY_DIR}/libjpeg-turbo/
	${CMAKE_BINARY_DIR}/libpng/
)

IF(MSVC AND NOT X64)
	SET(CMAKE_SHARED_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} /SAFESEH:NO")
ENDIF()

INSTALL(TARGETS freeimage
	RUNTIME DESTINATION ${INSTALL_BINDIR}
	LIBRARY DESTINATION ${INSTALL_LIBDIR}
	ARCHIVE DESTINATION ${INSTALL_ARCHIVEDIR}
)

INSTALL(FILES
	${PROJECT_DIR}/FreeImage.h
	DESTINATION ${INSTALL_INCDIR}
)
